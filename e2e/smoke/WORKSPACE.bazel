# Override http_archive for local testing
local_repository(
    name = "rules_debian_packages",
    path = "../..",
)

# ===== setup rules_oci =====
load("@rules_oci//oci:dependencies.bzl", "rules_oci_dependencies")

rules_oci_dependencies()

load("@rules_oci//oci:repositories.bzl", "LATEST_CRANE_VERSION", "oci_register_toolchains")

oci_register_toolchains(
    name = "oci",
    crane_version = LATEST_CRANE_VERSION,
)

load("@rules_oci//oci:pull.bzl", "oci_pull")

oci_pull(
    name = "oci_distroless_cc",
    # tag = "latest",
    digest = "sha256:a9056d2232d16e3772bec3ef36b93a5ea9ef6ad4b4ed407631e534b85832cf40",  # Dec 6, 2023
    image = "gcr.io/distroless/cc-debian12",
    platforms = ["linux/amd64"],
)

oci_pull(
    name = "oci_ubuntu_base",
    # tag = "latest",
    digest = "sha256:f9d633ff6640178c2d0525017174a688e2c1aef28f0a0130b26bd5554491f0da",  # Feb 23, 2024
    image = "mirror.gcr.io/library/ubuntu",
    platforms = ["linux/amd64"],
)

# ===== setup rules_pkg =====
load("@rules_pkg//:deps.bzl", "rules_pkg_dependencies")

rules_pkg_dependencies()

# ===== setup container_structure_test =====
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "container_structure_test",
    sha256 = "4fd1e0d4974fb95e06d0e94e6ceaae126382bf958524062db4e582232590b863",
    strip_prefix = "container-structure-test-1.16.1",
    urls = ["https://github.com/GoogleContainerTools/container-structure-test/archive/v1.16.1.zip"],
)

load("@container_structure_test//:repositories.bzl", "container_structure_test_register_toolchain")

container_structure_test_register_toolchain(name = "st")

#---SNIP--- Below here is re-used in the workspace snippet published on releases

######################
# rules_debian_packages setup #
######################
# Fetches the rules_debian_packages dependencies.
# If you want to have a different version of some dependency,
# you should fetch it *before* calling this.
# Alternatively, you can skip calling this function, so long as you've
# already fetched all the dependencies.
load("@rules_python//python:repositories.bzl", "py_repositories", "python_register_toolchains")

py_repositories()

python_register_toolchains(
    name = "python",
    python_version = "3.10",
)

load("@python//:defs.bzl", python_interpreter = "interpreter")
load("@rules_debian_packages//debian_packages:repositories.bzl", "rules_debian_packages_dependencies")

rules_debian_packages_dependencies(python_interpreter_target = python_interpreter)

load("@rules_debian_packages//debian_packages:defs.bzl", "debian_packages_repository")

debian_packages_repository(
    name = "debian_packages",
    default_arch = "amd64",
    default_distro = "debian12",
    lock_file = "//:debian-packages.lock",
)

debian_packages_repository(
    name = "ubuntu_packages",
    default_arch = "amd64",
    default_distro = "ubuntu2204",
    lock_file = "//:ubuntu-packages.lock",
)

load("@debian_packages//:packages.bzl", debian_packages_install_deps = "install_deps")

debian_packages_install_deps()

load("@ubuntu_packages//:packages.bzl", ubuntu_packages_install_deps = "install_deps")

ubuntu_packages_install_deps()
